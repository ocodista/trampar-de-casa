// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscribers {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String             @unique
  name             String?
  linkedInUrl      String?
  gitHub           String?
  startedWorkingAt DateTime?
  skills           Json?
  englishLevel     EnglishLevel?
  sentRoles        SentRoles[]        @relation(name: "SentRoles")
  subscriberTopics SubscriberTopics[]
  isConfirmed      Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  optOut           Boolean            @default(false)

  @@map("Subscribers")
}

model Roles {
  id          String     @id @default(uuid())
  companyId   String
  company     Companies  @relation(fields: [companyId], references: [id])
  title       String
  description String
  country     String
  language    String
  currency    String?
  salary      String?
  skills      Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  sentRolesId String?    @unique
  sentRoles   SentRoles? @relation(fields: [sentRolesId], references: [id])

  @@map("Roles")
}

model SentRoles {
  id          String        @id @default(uuid())
  sentAt      DateTime?
  roleId      String
  role        Roles?
  subscribers Subscribers[] @relation(name: "SentRoles")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([sentAt])
  @@map("SentRoles")
}

model SubscriberTopics {
  id           Int         @id @default(autoincrement())
  subscriber   Subscribers @relation(fields: [subscriberId], references: [id])
  subscriberId String      @db.Uuid
  topic        Topics      @relation(fields: [topicId], references: [id])
  topicId      Int
}

model Topics {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  subscribers SubscriberTopics[]

  @@map("Topics")
}

model Companies {
  id          String   @id @default(uuid())
  name        String
  url         String
  logoUrl     String?
  countryIcon String
  roles       Roles[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Companies")
}

enum EnglishLevel {
  Beginner
  Intermediary
  Advanced
  Fluent
}
